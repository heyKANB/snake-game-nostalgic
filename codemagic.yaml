workflows:
  ios-snake-game:
    name: iOS Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: Apple Connect App Mgr
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.snakegame.nostalgic
        # Codemagic automatically manages certificates and provisioning profiles
        # when App Store Connect integration is configured
      vars:
        BUNDLE_ID: "com.snakegame.nostalgic"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        APP_STORE_APPLE_ID: 1234567890  # You'll get this from App Store Connect
        CODE_SIGN_IDENTITY: "iPhone Distribution"
        # TEAM_ID: "XXXXXXXXXX"  # Add your 10-character Apple Developer Team ID here when available
      groups:
        - app_store_credentials  # This group will contain your Apple Developer credentials
      node: v18.17.0
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy ios
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Trying basic sync..."
            npx cap sync ios || echo "Sync also failed, but continuing..."
          fi
          
          echo "Checking iOS sync result..."
          ls -la ios/App/App/public/ || echo "iOS public directory not found"
          set -e  # Re-enable exit on error
      - name: Install CocoaPods dependencies
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios/App
          
          # Clean build environment completely
          echo "Cleaning previous build artifacts..."
          rm -rf Pods/ 
          rm -rf Podfile.lock
          rm -rf build/
          rm -rf App.xcworkspace/xcuserdata/
          rm -rf DerivedData/
          
          # Fresh CocoaPods installation
          pod cache clean --all
          pod install --repo-update --verbose
          
          # Verify workspace was created properly
          ls -la App.xcworkspace/
          ls -la App.xcworkspace/contents.xcworkspacedata || echo "Workspace data file missing"
      - name: Debug iOS Build Configuration
        script: |
          echo "=== iOS Build Debug Information ==="
          echo "Xcode version:"
          xcodebuild -version || echo "xcodebuild not available"
          
          echo "Current directory and files:"
          pwd
          ls -la
          
          echo "iOS directory structure:"
          ls -la ios/App/ || echo "iOS App directory not found"
          
          echo "Workspace exists:"
          ls -la "$XCODE_WORKSPACE" || echo "Workspace not found: $XCODE_WORKSPACE"
          
          echo "Available schemes:"
          xcodebuild -list -workspace "$XCODE_WORKSPACE" || echo "Cannot list schemes"
          
          echo "Code signing identities:"
          security find-identity -v -p codesigning || echo "No code signing identities found"
          
          echo "Bundle ID check:"
          echo "Expected: $BUNDLE_ID"
          echo "Capacitor config:"
          cat capacitor.config.ts | grep -A 2 -B 2 "appId" || echo "Config not found"
          
          echo "Project bundle ID settings:"
          cd ios/App
          grep -r "PRODUCT_BUNDLE_IDENTIFIER" App.xcodeproj/ || echo "Bundle ID not found in project"
          cd ../..
      - name: Set up code signing settings on Xcode project
        script: |
          echo "Setting up code signing..."
          # Apply automatic code signing with Codemagic-managed certificates
          xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
          echo "Building iOS app..."
          echo "Workspace: $XCODE_WORKSPACE"
          echo "Scheme: $XCODE_SCHEME"
          echo "Bundle ID: $BUNDLE_ID"
          
          # Navigate to iOS directory
          cd ios/App
          
          # Verify workspace
          if [ ! -f "App.xcworkspace/contents.xcworkspacedata" ]; then
            echo "ERROR: Workspace file not found"
            exit 1
          fi
          
          echo "Building with xcodebuild directly..."
          
          # Verify project configuration
          echo "Checking workspace and schemes..."
          xcodebuild -list -workspace App.xcworkspace
          
          echo "Ensuring scheme is shared..."
          ls -la App.xcodeproj/xcshareddata/xcschemes/ || {
            echo "No shared schemes found, scheme should be created in project setup"
            echo "Available schemes in workspace:"
            xcodebuild -list -workspace App.xcworkspace | grep -A 10 "Schemes:"
          }
          
          echo "Checking project build settings..."
          xcodebuild -showBuildSettings \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release | grep -E "(BUNDLE_ID|CODE_SIGN|TEAM|MARKETING|CURRENT_PROJECT)"
          
          echo "Checking Info.plist version settings..."
          grep -A 1 -B 1 "MARKETING_VERSION\|CURRENT_PROJECT_VERSION" App/Info.plist || echo "Version settings not found in Info.plist"
          
          echo "Validating build configuration first..."
          xcodebuild clean \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release
          
          echo "Testing basic build without signing..."
          xcodebuild build \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -quiet || {
              echo "Basic build failed - checking for compilation errors..."
              echo "Build logs above should show specific compilation issues"
              exit 1
            }
          
          echo "Basic build succeeded, proceeding with signed build..."
          
          # Create build directory
          mkdir -p build
          
          echo "Creating archive..."
          set -x  # Enable command echoing for debugging
          xcodebuild archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/App.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            -allowProvisioningUpdates
          set +x  # Disable command echoing
          
          echo "Checking if archive was created..."
          if [ -d "build/App.xcarchive" ]; then
            echo "✅ Archive created successfully!"
            ls -la build/App.xcarchive/
          else
            echo "❌ Archive creation failed"
            echo "Build directory contents:"
            ls -la build/ || echo "Build directory doesn't exist"
            echo "Available SDKs:"
            xcodebuild -showsdks | head -10
            echo "Last 50 lines of build output should show the error above"
            exit 1
          fi
          
          # Create export options
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Verify archive was created
          if [ ! -d "build/App.xcarchive" ]; then
            echo "ERROR: Archive not created at build/App.xcarchive"
            echo "Listing build directory contents:"
            ls -la build/ || echo "Build directory does not exist"
            exit 1
          fi
          
          echo "Archive created successfully, proceeding with export..."
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/App.xcarchive \
            -exportPath build/ipa \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates
          
          echo "Build complete. Contents of build directory:"
          ls -la build/
          ls -la build/ipa/ || echo "IPA directory not found"
    artifacts:
      - ios/App/build/ipa/*.ipa
      - ios/App/build/App.xcarchive
      - /tmp/xcodebuild_logs/*.log
      - build/ios/ipa/*.ipa
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        
        # Submit to TestFlight but not to App Store review
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
        
        # Uncomment when ready for App Store submission
        # submit_to_app_store: true
        # cancel_previous_submissions: true
        # release_type: AFTER_APPROVAL

  android-snake-game:
    name: Android Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      android_signing:
        # Automatic Android signing with uploaded keystore
        - keystore_reference  # This references the keystore uploaded to Codemagic
        # Alternative manual signing variables:
        # - keystore: $ANDROID_KEYSTORE
        # - keystore_password: $ANDROID_KEYSTORE_PASSWORD
        # - key_alias: $ANDROID_KEY_ALIAS
        # - key_password: $ANDROID_KEY_PASSWORD
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.snakegame.nostalgic"
      node: v18.17.0
      java: 17
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
        - ~/.gradle/caches
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy android
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Trying basic sync..."
            npx cap sync android || echo "Sync also failed, but continuing..."
          fi
          
          echo "Checking Android sync result..."
          ls -la android/app/src/main/assets/public/ || echo "Android public directory not found"
          set -e  # Re-enable exit on error
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android release
        script: |
          cd android
          ./gradlew bundleRelease
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true