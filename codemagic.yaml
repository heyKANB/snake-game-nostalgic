workflows:
  ios-snake-game:
    name: iOS Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: Apple Connect App Mgr
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.snakegame.nostalgic
      vars:
        BUNDLE_ID: "com.snakegame.nostalgic"
        APPLE_ID: "6749170406"
        APP_STORE_CONNECT_KEY_ID: "7629KQWD3Z"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        CODE_SIGN_IDENTITY: "iPhone Distribution"
        # TEAM_ID: "$TEAM_ID"  # Team ID from App Store Connect integration (auto-detected)
      groups:
        - app_store_credentials  # This group will contain your Apple Developer credentials
      node: v18.17.0
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy ios
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Manually copying required files..."
            
            # Create iOS app directory structure
            mkdir -p ios/App/App/public
            
            # Copy web assets
            if [ -d "dist/public" ]; then
              cp -r dist/public/* ios/App/App/public/ || echo "Failed to copy public files"
            fi
            
            # Ensure app icon is properly set up
            echo "Setting up app icon..."
            if [ -f "attached_assets/Hunter GAmes_1754427099812.png" ]; then
              mkdir -p ios/App/App/Assets.xcassets/AppIcon.appiconset/
              cp "attached_assets/Hunter GAmes_1754427099812.png" ios/App/App/Assets.xcassets/AppIcon.appiconset/icon-1024.png
              echo "App icon copied successfully"
              echo "iOS app icon configuration updated"
            fi
            
            # Create required config.xml
            echo '<?xml version="1.0" encoding="utf-8"?>' > ios/App/App/config.xml
            echo '<widget id="com.snakegame.nostalgic" version="1.6.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">' >> ios/App/App/config.xml
            echo '    <name>Snake Game - Nostalgic</name>' >> ios/App/App/config.xml
            echo '    <description>A nostalgic Snake game</description>' >> ios/App/App/config.xml
            echo '    <content src="index.html" />' >> ios/App/App/config.xml
            echo '    <access origin="*" />' >> ios/App/App/config.xml
            echo '    <platform name="ios">' >> ios/App/App/config.xml
            echo '        <allow-intent href="itms:*" />' >> ios/App/App/config.xml
            echo '        <allow-intent href="itms-apps:*" />' >> ios/App/App/config.xml
            echo '    </platform>' >> ios/App/App/config.xml
            echo '</widget>' >> ios/App/App/config.xml
            
            # Copy capacitor config
            cp capacitor.config.ts ios/App/App/capacitor.config.json 2>/dev/null || {
              echo '{"appId":"com.snakegame.nostalgic","appName":"Snake Game - Nostalgic","webDir":"dist/public"}' > ios/App/App/capacitor.config.json
            }
            
            echo "Manual copy completed"
          fi
          
          echo "Verifying required files are present..."
          ls -la ios/App/App/public/ || echo "Public directory still missing"
          ls -la ios/App/App/config.xml || echo "Config.xml still missing"
          ls -la ios/App/App/capacitor.config.* || echo "Capacitor config still missing"
          set -e  # Re-enable exit on error
      - name: Install CocoaPods dependencies and fix build phases
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios/App
          
          # Clean build environment completely
          echo "Cleaning previous build artifacts..."
          rm -rf Pods/ 
          rm -rf Podfile.lock
          rm -rf build/
          rm -rf App.xcworkspace/xcuserdata/
          rm -rf DerivedData/
          
          # Fresh CocoaPods installation
          pod cache clean --all
          pod install --repo-update --verbose
          
          # Fix CocoaPods framework embedding issue
          echo "Fixing CocoaPods build phases..."
          
          # Simplified approach: Install CocoaPods and accept the warning  
          echo "Installing CocoaPods dependencies (accepting build phase warning)..."
          pod install --repo-update --verbose
          
          # The build warning is non-fatal, Codemagic can proceed with the build
          
          # Verify workspace was created properly
          ls -la App.xcworkspace/
          ls -la App.xcworkspace/contents.xcworkspacedata || echo "Workspace data file missing"
      - name: Debug iOS Build Configuration
        script: |
          echo "=== iOS Build Debug Information ==="
          echo "Xcode version:"
          xcodebuild -version || echo "xcodebuild not available"
          
          echo "Current directory and files:"
          pwd
          ls -la
          
          echo "iOS directory structure:"
          ls -la ios/App/ || echo "iOS App directory not found"
          
          echo "Workspace exists:"
          ls -la "$XCODE_WORKSPACE" || echo "Workspace not found: $XCODE_WORKSPACE"
          
          echo "Available schemes:"
          xcodebuild -list -workspace "$XCODE_WORKSPACE" || echo "Cannot list schemes"
          
          echo "Code signing identities:"
          security find-identity -v -p codesigning || echo "No code signing identities found"
          
          echo "App Store Configuration:"
          echo "Bundle ID: $BUNDLE_ID"
          echo "Apple ID: $APPLE_ID"
          echo "Capacitor config:"
          cat capacitor.config.ts | grep -A 2 -B 2 "appId" || echo "Config not found"
          
          echo "Project bundle ID settings:"
          cd ios/App
          grep -r "PRODUCT_BUNDLE_IDENTIFIER" App.xcodeproj/ || {
            echo "Bundle ID not found in project settings, adding to build configuration..."
            # Ensure bundle ID is set in project
            sed -i 's/PRODUCT_BUNDLE_IDENTIFIER = [^;]*/PRODUCT_BUNDLE_IDENTIFIER = com.snakegame.nostalgic/' App.xcodeproj/project.pbxproj
          }
          cd ../..
      - name: Set up code signing settings on Xcode project
        script: |
          echo "Setting up code signing..."
          echo "Team ID: TYRA6QN5W5"
          
          # Set team ID as environment variable
          export TEAM_ID="TYRA6QN5W5"
          
          # Configure automatic code signing (recommended for Codemagic)
          echo "Configuring automatic code signing for Codemagic compatibility..."
          cd ios/App
          
          # Update project settings to use automatic signing
          sed -i '' 's/CODE_SIGN_STYLE = Manual/CODE_SIGN_STYLE = Automatic/' App.xcodeproj/project.pbxproj || echo "CODE_SIGN_STYLE not found"
          sed -i '' 's/ProvisioningStyle = Manual/ProvisioningStyle = Automatic/' App.xcodeproj/project.pbxproj || echo "ProvisioningStyle not found"
          
          # Set development team
          sed -i '' "s/DEVELOPMENT_TEAM = .*/DEVELOPMENT_TEAM = TYRA6QN5W5;/" App.xcodeproj/project.pbxproj || echo "DEVELOPMENT_TEAM not updated"
          
          # Update bundle version to 7 for new app icon release
          echo "Updating bundle version to 7 for new app icon release..."
          sed -i '' 's/CURRENT_PROJECT_VERSION = [^;]*/CURRENT_PROJECT_VERSION = 7/' App.xcodeproj/project.pbxproj || echo "CURRENT_PROJECT_VERSION not found, adding..."
          sed -i '' 's/CFBundleVersion = [^;]*/CFBundleVersion = 7/' App.xcodeproj/project.pbxproj || echo "CFBundleVersion not found in pbxproj"
          
          # Also update Info.plist if it exists
          if [ -f "App/Info.plist" ]; then
            echo "Updating CFBundleVersion in Info.plist..."
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 7" App/Info.plist || echo "CFBundleVersion not updated in Info.plist"
          fi
          
          cd ../..
          
          # Apply Codemagic's automatic code signing
          xcode-project use-profiles
      - name: Build iOS app for App Store
        script: |
          echo "Building iOS app for App Store distribution..."
          cd ios/App
          
          # Verify workspace exists
          if [ ! -f "App.xcworkspace/contents.xcworkspacedata" ]; then
            echo "ERROR: Workspace not found"
            exit 1
          fi
          
          # Set team ID for build
          export TEAM_ID="TYRA6QN5W5"
          
          # Clean workspace before building
          echo "Cleaning workspace to prevent build cache issues..."
          xcodebuild -workspace "App.xcworkspace" -scheme "App" -config "Release" clean
          
          # Use Codemagic's recommended build method to handle code signing automatically
          echo "Building archive using Codemagic's xcode-project build-ipa..."
          
          # Set build environment variables
          export DEVELOPMENT_TEAM="TYRA6QN5W5"
          export CODE_SIGN_STYLE="Automatic"
          export IPHONEOS_DEPLOYMENT_TARGET="14.0"
          
          # Use Codemagic's native build command which handles provisioning profiles
          xcode-project build-ipa \
            --workspace "App.xcworkspace" \
            --scheme "App" \
            --config "Release" \
            --archive-flags="-destination 'generic/platform=iOS' ONLY_ACTIVE_ARCH=NO ARCHS=arm64"
      - name: Verify build completion
        script: |
          echo "✅ iOS build completed using Codemagic's xcode-project build-ipa"
          echo "Debugging IPA location..."
          
          # Search for IPA files everywhere
          echo "=== Searching for IPA files ==="
          find . -name "*.ipa" -type f 2>/dev/null | head -10 || echo "No IPA files found yet"
          
          # Check common build directories
          echo "=== Checking build directories ==="
          ls -la ios/App/build/ 2>/dev/null || echo "ios/App/build/ not found"
          ls -la build/ 2>/dev/null || echo "build/ not found"
          
          # Check Xcode DerivedData equivalent
          echo "=== Checking for Xcode build products ==="
          find . -name "Products" -type d 2>/dev/null | head -5
          find . -name "*.app" -type d 2>/dev/null | head -5
          
          # List all directories that might contain build outputs
          echo "=== All directories in ios/App ==="
          find ios/App -type d -maxdepth 2 2>/dev/null || echo "Cannot list ios/App directories"
          
          echo "Ready for App Store Connect publishing using integration: Apple Connect App Mgr"
          echo "Key ID: 7629KQWD3Z"
    artifacts:
      - ios/App/build/**/*.ipa
      - ios/App/build/**/*.xcarchive
      - "**/*.ipa"
      - "**/*.xcarchive"
      - "build/**/*.ipa"
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        
        # Submit to TestFlight (this uploads the build to App Store Connect)
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
        
        # Uncomment when ready for App Store submission
        # submit_to_app_store: true
        # cancel_previous_submissions: true
        # release_type: AFTER_APPROVAL

  android-snake-game:
    name: Android Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      android_signing:
        # Automatic Android signing with uploaded keystore
        - keystore_reference  # This references the keystore uploaded to Codemagic
        # Alternative manual signing variables:
        # - keystore: $ANDROID_KEYSTORE
        # - keystore_password: $ANDROID_KEYSTORE_PASSWORD
        # - key_alias: $ANDROID_KEY_ALIAS
        # - key_password: $ANDROID_KEY_PASSWORD
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.snakegame.nostalgic"
      node: v18.17.0
      java: 17
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
        - ~/.gradle/caches
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy android
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Trying basic sync..."
            npx cap sync android || echo "Sync also failed, but continuing..."
          fi
          
          echo "Checking Android sync result..."
          ls -la android/app/src/main/assets/public/ || echo "Android public directory not found"
          set -e  # Re-enable exit on error
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android release
        script: |
          cd android
          ./gradlew bundleRelease
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true