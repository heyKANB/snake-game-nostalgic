workflows:
  ios-snake-game:
    name: iOS Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: Apple Connect App Mgr
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.snakegame.nostalgic
        # Codemagic automatically manages certificates and provisioning profiles
        # when App Store Connect integration is configured
      vars:
        BUNDLE_ID: "com.snakegame.nostalgic"
        APPLE_ID: "6749170406"
        APP_STORE_CONNECT_KEY_ID: "7629KQWD3Z"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        CODE_SIGN_IDENTITY: "iPhone Distribution"
        # TEAM_ID: "$TEAM_ID"  # Team ID from App Store Connect integration (auto-detected)
      groups:
        - app_store_credentials  # This group will contain your Apple Developer credentials
      node: v18.17.0
      xcode: latest
      cocoapods: default
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy ios
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Manually copying required files..."
            
            # Create iOS app directory structure
            mkdir -p ios/App/App/public
            
            # Copy web assets
            if [ -d "dist/public" ]; then
              cp -r dist/public/* ios/App/App/public/ || echo "Failed to copy public files"
            fi
            
            # Create required config.xml
            echo '<?xml version="1.0" encoding="utf-8"?>' > ios/App/App/config.xml
            echo '<widget id="com.snakegame.nostalgic" version="1.0.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">' >> ios/App/App/config.xml
            echo '    <name>Snake Game - Nostalgic</name>' >> ios/App/App/config.xml
            echo '    <description>A nostalgic Snake game</description>' >> ios/App/App/config.xml
            echo '    <content src="index.html" />' >> ios/App/App/config.xml
            echo '    <access origin="*" />' >> ios/App/App/config.xml
            echo '    <platform name="ios">' >> ios/App/App/config.xml
            echo '        <allow-intent href="itms:*" />' >> ios/App/App/config.xml
            echo '        <allow-intent href="itms-apps:*" />' >> ios/App/App/config.xml
            echo '    </platform>' >> ios/App/App/config.xml
            echo '</widget>' >> ios/App/App/config.xml
            
            # Copy capacitor config
            cp capacitor.config.ts ios/App/App/capacitor.config.json 2>/dev/null || {
              echo '{"appId":"com.snakegame.nostalgic","appName":"Snake Game - Nostalgic","webDir":"dist/public"}' > ios/App/App/capacitor.config.json
            }
            
            echo "Manual copy completed"
          fi
          
          echo "Verifying required files are present..."
          ls -la ios/App/App/public/ || echo "Public directory still missing"
          ls -la ios/App/App/config.xml || echo "Config.xml still missing"
          ls -la ios/App/App/capacitor.config.* || echo "Capacitor config still missing"
          set -e  # Re-enable exit on error
      - name: Install CocoaPods dependencies
        script: |
          echo "Installing CocoaPods dependencies..."
          cd ios/App
          
          # Clean build environment completely
          echo "Cleaning previous build artifacts..."
          rm -rf Pods/ 
          rm -rf Podfile.lock
          rm -rf build/
          rm -rf App.xcworkspace/xcuserdata/
          rm -rf DerivedData/
          
          # Fresh CocoaPods installation
          pod cache clean --all
          pod install --repo-update --verbose
          
          # Verify workspace was created properly
          ls -la App.xcworkspace/
          ls -la App.xcworkspace/contents.xcworkspacedata || echo "Workspace data file missing"
      - name: Debug iOS Build Configuration
        script: |
          echo "=== iOS Build Debug Information ==="
          echo "Xcode version:"
          xcodebuild -version || echo "xcodebuild not available"
          
          echo "Current directory and files:"
          pwd
          ls -la
          
          echo "iOS directory structure:"
          ls -la ios/App/ || echo "iOS App directory not found"
          
          echo "Workspace exists:"
          ls -la "$XCODE_WORKSPACE" || echo "Workspace not found: $XCODE_WORKSPACE"
          
          echo "Available schemes:"
          xcodebuild -list -workspace "$XCODE_WORKSPACE" || echo "Cannot list schemes"
          
          echo "Code signing identities:"
          security find-identity -v -p codesigning || echo "No code signing identities found"
          
          echo "App Store Configuration:"
          echo "Bundle ID: $BUNDLE_ID"
          echo "Apple ID: $APPLE_ID"
          echo "Capacitor config:"
          cat capacitor.config.ts | grep -A 2 -B 2 "appId" || echo "Config not found"
          
          echo "Project bundle ID settings:"
          cd ios/App
          grep -r "PRODUCT_BUNDLE_IDENTIFIER" App.xcodeproj/ || {
            echo "Bundle ID not found in project settings, adding to build configuration..."
            # Ensure bundle ID is set in project
            sed -i 's/PRODUCT_BUNDLE_IDENTIFIER = [^;]*/PRODUCT_BUNDLE_IDENTIFIER = com.snakegame.nostalgic/' App.xcodeproj/project.pbxproj
          }
          cd ../..
      - name: Set up code signing settings on Xcode project
        script: |
          echo "Setting up code signing..."
          # Apply automatic code signing with Codemagic-managed certificates
          xcode-project use-profiles
      - name: Build ipa for distribution
        script: |
          echo "Building iOS app..."
          echo "Workspace: $XCODE_WORKSPACE"
          echo "Scheme: $XCODE_SCHEME"
          echo "Bundle ID: $BUNDLE_ID"
          
          # Navigate to iOS directory
          cd ios/App
          
          # Verify workspace
          if [ ! -f "App.xcworkspace/contents.xcworkspacedata" ]; then
            echo "ERROR: Workspace file not found"
            exit 1
          fi
          
          echo "Building with xcodebuild directly..."
          
          # Verify project configuration
          echo "Checking workspace and schemes..."
          xcodebuild -list -workspace App.xcworkspace
          
          echo "Ensuring scheme is shared..."
          ls -la App.xcodeproj/xcshareddata/xcschemes/ || {
            echo "No shared schemes found, scheme should be created in project setup"
            echo "Available schemes in workspace:"
            xcodebuild -list -workspace App.xcworkspace | grep -A 10 "Schemes:"
          }
          
          echo "Checking project build settings..."
          xcodebuild -showBuildSettings \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release | grep -E "(BUNDLE_ID|CODE_SIGN|TEAM|MARKETING|CURRENT_PROJECT)"
          
          echo "Checking Info.plist version settings..."
          grep -A 1 -B 1 "MARKETING_VERSION\|CURRENT_PROJECT_VERSION" App/Info.plist || echo "Version settings not found in Info.plist"
          
          echo "Validating build configuration first..."
          xcodebuild clean \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release
          
          echo "Testing basic build without signing..."
          xcodebuild build \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            -quiet || {
              echo "Basic build failed - checking for compilation errors..."
              echo "Build logs above should show specific compilation issues"
              exit 1
            }
          
          echo "Basic build succeeded, proceeding with signed build..."
          
          echo "=== ARCHIVE CREATION WITH COMPREHENSIVE DEBUGGING ==="
          echo "Available provisioning profiles:"
          find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" 2>/dev/null | head -5 || echo "No provisioning profiles found"
          
          echo "Code signing identities available:"
          security find-identity -v -p codesigning | head -10
          
          echo "Starting archive process with full verbosity..."
          set -x  # Enable command tracing
          
          xcodebuild archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/Archive.xcarchive \
            -allowProvisioningUpdates \
            MARKETING_VERSION=1.0.0 \
            CURRENT_PROJECT_VERSION=1 \
            -verbose 2>&1 | tee archive_build.log
          
          ARCHIVE_RESULT=$?
          set +x  # Disable command tracing
          
          echo "=== ARCHIVE RESULT ANALYSIS ==="
          echo "Archive exit code: $ARCHIVE_RESULT"
          
          if [ $ARCHIVE_RESULT -ne 0 ]; then
            echo "❌ ARCHIVE FAILED - Detailed analysis:"
            echo ""
            echo "Last 30 lines of build output:"
            tail -n 30 archive_build.log
            echo ""
            echo "Error patterns found:"
            grep -i -C 2 "error\|fail\|exception" archive_build.log | tail -20
            echo ""
            echo "Code signing issues:"
            grep -i -C 2 "code.sign\|provision\|certificate" archive_build.log | tail -10
            echo ""
            echo "Build settings verification:"
            xcodebuild -showBuildSettings -workspace App.xcworkspace -scheme App -configuration Release | grep -E "(BUNDLE_IDENTIFIER|MARKETING_VERSION|CURRENT_PROJECT_VERSION)" || echo "Cannot show build settings"
            echo ""
            exit $ARCHIVE_RESULT
          else
            echo "✅ ARCHIVE SUCCESS"
            echo "Archive contents:"
            ls -la build/Archive.xcarchive/
            echo "Archive Info.plist:"
            cat build/Archive.xcarchive/Info.plist 2>/dev/null || echo "Archive Info.plist not found"
          fi
          
          # Create build directory
          mkdir -p build
          
          # Create export options for App Store distribution (export only, upload via publishing)
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>destination</key>
              <string>export</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Export IPA if archive was successful
          if [ -d "build/Archive.xcarchive" ]; then
            echo "Proceeding with IPA export for App Store Connect..."
            
            # Create export directory
            mkdir -p build/ipa
            echo "Created export directory: build/ipa"
            
            # Debug current working directory
            echo "Current working directory: $(pwd)"
            echo "Archive path exists: $(ls -la build/Archive.xcarchive)"
            
            # Debug export options
            echo "Export options content:"
            cat ExportOptions.plist
            
            # Debug provisioning and signing setup
            echo "Available signing identities:"
            security find-identity -v -p codesigning || echo "No signing identities found"
            
            echo "Provisioning profiles:"
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ 2>/dev/null || echo "No provisioning profiles found"
            
            echo "App Store Connect integration verification:"
            echo "Integration: Apple Connect App Mgr"
            echo "Key ID: 7629KQWD3Z"
            echo "Bundle ID: com.snakegame.nostalgic"
            
            # Export for App Store distribution (no upload)
            echo "Starting xcodebuild export for App Store distribution..."
            xcodebuild -exportArchive \
              -archivePath "$(pwd)/build/Archive.xcarchive" \
              -exportPath "$(pwd)/build/ipa" \
              -exportOptionsPlist "$(pwd)/ExportOptions.plist" \
              -allowProvisioningUpdates \
              2>&1 | tee export_build.log
            
            EXPORT_RESULT=$?
            echo "Export exit code: $EXPORT_RESULT"
            
            # Debug what was actually created
            echo "Full directory structure after export:"
            find build -type f 2>/dev/null || echo "No files in build directory"
            
            if [ $EXPORT_RESULT -eq 0 ]; then
              echo "✅ Export command completed successfully"
              
              # Check all possible export locations
              echo "Checking for IPA files in multiple locations:"
              find . -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found anywhere"
              
              # Check export directory structure
              if [ -d "build/ipa" ]; then
                echo "Export directory contents:"
                ls -la build/ipa/ || echo "Cannot list export directory"
                
                # Look for IPA in subdirectories
                find build/ipa -name "*.ipa" -type f 2>/dev/null || echo "No IPA in export directory"
              else
                echo "❌ Export directory was not created"
              fi
              
              # Verify IPA was created somewhere
              IPA_FILES=$(find build -name "*.ipa" -type f 2>/dev/null)
              if [ -n "$IPA_FILES" ]; then
                echo "✅ IPA file(s) found:"
                echo "$IPA_FILES"
                ls -la $IPA_FILES
                
                # Move IPA to expected location if needed
                for ipa in $IPA_FILES; do
                  if [ "$ipa" != "build/ipa/$(basename $ipa)" ]; then
                    echo "Moving IPA to expected location: $ipa -> build/ipa/"
                    cp "$ipa" build/ipa/
                  fi
                done
                
                echo "Final IPA verification:"
                ls -la build/ipa/*.ipa
              else
                echo "❌ No IPA file found anywhere in build directory"
                echo "Export logs:"
                tail -50 export_build.log
                exit 1
              fi
            else
              echo "❌ IPA Export failed with exit code: $EXPORT_RESULT"
              echo "Export error logs:"
              tail -50 export_build.log
              exit 1
            fi
          else
            echo "❌ Cannot export IPA - no archive found"
            exit 1
          fi
          
          echo "Build complete. Contents of build directory:"
          ls -la build/
          ls -la build/ipa/ || echo "IPA directory not found"
    artifacts:
      - ios/App/build/ipa/*.ipa
      - ios/App/build/**/*.ipa
      - ios/App/build/Archive.xcarchive
      - ios/App/archive_build.log
      - ios/App/export_build.log
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      app_store_connect:
        auth: integration
        
        # Submit to TestFlight (this uploads the build to App Store Connect)
        submit_to_testflight: true
        beta_groups:
          - App Store Connect Users
        submit_to_app_store: false
        
        # Uncomment when ready for App Store submission
        # submit_to_app_store: true
        # cancel_previous_submissions: true
        # release_type: AFTER_APPROVAL

  android-snake-game:
    name: Android Snake Game Build & Deploy
    max_build_duration: 60
    instance_type: linux_x2
    environment:
      android_signing:
        # Automatic Android signing with uploaded keystore
        - keystore_reference  # This references the keystore uploaded to Codemagic
        # Alternative manual signing variables:
        # - keystore: $ANDROID_KEYSTORE
        # - keystore_password: $ANDROID_KEYSTORE_PASSWORD
        # - key_alias: $ANDROID_KEY_ALIAS
        # - key_password: $ANDROID_KEY_PASSWORD
      groups:
        - google_play
      vars:
        PACKAGE_NAME: "com.snakegame.nostalgic"
      node: v18.17.0
      java: 17
    cache:
      cache_paths:
        - $CM_BUILD_DIR/node_modules
        - ~/.gradle/caches
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Install npm dependencies
        script: |
          npm ci
      - name: Build web application
        script: |
          npm run build
      - name: Verify build output
        script: |
          echo "Checking build output..."
          ls -la dist/ || echo "dist/ directory not found"
          ls -la dist/public/ || echo "dist/public/ directory not found"
      - name: Initialize Capacitor platforms
        script: |
          echo "Setting up Capacitor platforms..."
          npx cap add ios --confirm || echo "iOS platform already exists"
          npx cap add android --confirm || echo "Android platform already exists"
          echo "Platform setup complete"
      - name: Sync Capacitor with web app
        script: |
          set +e  # Don't exit on error
          echo "Syncing Capacitor..."
          echo "Current directory: $(pwd)"
          echo "Checking capacitor.config.ts..."
          cat capacitor.config.ts
          echo "Checking webDir exists..."
          ls -la dist/public/
          
          echo "Running capacitor copy (safer than sync)..."
          npx cap copy android
          COPY_EXIT_CODE=$?
          
          if [ $COPY_EXIT_CODE -eq 0 ]; then
            echo "✅ Capacitor copy successful"
          else
            echo "❌ Capacitor copy failed with code $COPY_EXIT_CODE"
            echo "Trying basic sync..."
            npx cap sync android || echo "Sync also failed, but continuing..."
          fi
          
          echo "Checking Android sync result..."
          ls -la android/app/src/main/assets/public/ || echo "Android public directory not found"
          set -e  # Re-enable exit on error
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Build Android release
        script: |
          cd android
          ./gradlew bundleRelease
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
    publishing:
      email:
        recipients:
          - your-email@example.com  # Replace with your email
        notify:
          success: true
          failure: true
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: internal
        submit_as_draft: true